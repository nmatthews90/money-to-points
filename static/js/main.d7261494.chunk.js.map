{"version":3,"sources":["components/MoneyInput/MoneyInput.js","components/PointsOutput/PointsOutput.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["MoneyInput","changeHandler","userInput","className","type","onChange","value","placeholder","PointsOutput","props","purchaseAmount","overallPoints","Header","App","state","event","setState","target","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAuBeA,EArBI,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACjC,OACE,6BACE,6BAASC,UAAU,yDACjB,yBAAKA,UAAU,MACb,wBAAIA,UAAU,UAAd,iBACA,wBAAIA,UAAU,mBACZ,2BACEA,UAAU,cACVC,KAAK,SACLC,SAAUJ,EACVK,MAAOJ,EACPK,YAAY,WCUbC,EAtBM,SAAAC,GACnB,IAAIC,EAAiBD,EAAMC,eACvBC,EAAgB,EAQpB,OANID,GAAkB,IAAMA,GAAkB,IAC5CC,EAAgBD,EAAiB,GACxBA,EAAiB,MAC1BC,EAAgB,GAAKD,EAAiB,KAAO,IAI7C,6BACE,6BAASP,UAAU,yDACjB,yBAAKA,UAAU,MACb,wBAAIA,UAAU,UAAd,gBACA,wBAAIA,UAAU,mBAAmBQ,OCF5BC,EAbA,WACX,OACE,yBAAKT,UAAU,sBACb,uBAAGA,UAAU,MAAb,qFAGE,6BAHF,qEAMA,oFCoBOU,G,iNAtBbC,MAAQ,CACNZ,UAAW,I,EAGbD,cAAgB,SAAAc,GACd,EAAKC,SAAS,CAAEd,UAAWa,EAAME,OAAOX,S,wEAI1C,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEF,cAAeiB,KAAKjB,cACpBC,UAAWgB,KAAKhB,YAElB,kBAAC,EAAD,CAAcQ,eAAgBQ,KAAKJ,MAAMZ,iB,GAlB7BiB,c,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d7261494.chunk.js","sourcesContent":["import React from 'react';\n\nconst MoneyInput = ( {changeHandler, userInput} ) => {\n    return (\n      <div>\n        <article className=\"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\">\n          <div className=\"tc\">\n            <h1 className=\"f3 mb2\">Dollar Amount</h1>\n            <h2 className=\"f4 fw4 gray mt0\">\n              <input\n                className=\"f4 w-50 dib\"\n                type=\"number\"\n                onChange={changeHandler}\n                value={userInput}\n                placeholder=\"$\"\n              />\n            </h2>\n          </div>\n        </article>\n      </div>\n    );\n}\n\nexport default MoneyInput;","import React from \"react\";\n\nconst PointsOutput = props => {\n  let purchaseAmount = props.purchaseAmount;\n  let overallPoints = 0;\n\n  if (purchaseAmount >= 50 && purchaseAmount <= 100) {\n    overallPoints = purchaseAmount - 50;\n  } else if (purchaseAmount > 100) {\n    overallPoints = 2 * (purchaseAmount - 100) + 50;\n  }\n\n  return (\n    <div>\n      <article className=\"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\">\n        <div className=\"tc\">\n          <h1 className=\"f3 mb2\">Total Points</h1>\n          <h2 className=\"f4 fw4 gray mt0\">{overallPoints}</h2>\n        </div>\n      </article>\n    </div>\n  );\n};\n\nexport default PointsOutput;\n","import React from 'react';\n\nconst Header = () => {\n    return (\n      <div className=\"bb b--white-60 pv2\">\n        <p className=\"f3\">\n          A customer receives 2 points for every dollar spent over $100 in each\n          transaction,\n          <br />\n          plus 1 point for every dollar spent over $50 in each transaction.\n        </p>\n        <p>(e.g. a $120 purchase = 2x$20 + 1x$50 = 90 points).</p>\n      </div>\n    );\n}\nexport default Header; ","import React, { Component } from 'react';\nimport MoneyInput from './components/MoneyInput/MoneyInput';\nimport PointsOutput from './components/PointsOutput/PointsOutput';\nimport Header from './components/Header/Header';\nimport './App.css';\n\n\nclass App extends Component {\n  \n  state = {\n    userInput: \"\"\n  };\n\n  changeHandler = event => {\n    this.setState({ userInput: event.target.value });\n  };\n\n  render() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MoneyInput\n        changeHandler={this.changeHandler}\n        userInput={this.userInput}\n      />\n      <PointsOutput purchaseAmount={this.state.userInput} />\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport  'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}